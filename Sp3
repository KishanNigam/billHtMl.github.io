 Declare @COMPANY_CODE varchar(5) = 'BHSIC'
 Declare @CURRENT_PERIOD VARCHAR(10) = '2024-03-31'
 Declare @PRIOR_PERIOD VARCHAR(10) = '2000-01-31'
 Declare @PRIOR_PERIOD2 VARCHAR(10) = '2024-01-31'
 Declare @BASIS1 varchar(5) = 'GAAPC'
 Declare @BASIS2 varchar(5) = 'STATC'
 Declare @BU_TYPES VARCHAR(MAX) = 'SEG,AGENT,CLASS,REINS,AFFIL'-- New parameter to take a list of BU types as comma-separated values


    DECLARE @SQL NVARCHAR(MAX)
    DECLARE @BU_TYPES_TABLE TABLE (BU_TYPE VARCHAR(50))
    DECLARE @BU_JOIN NVARCHAR(MAX) = ''
    DECLARE @BU_SELECT NVARCHAR(MAX) = ''
    DECLARE @BU_GROUP_BY NVARCHAR(MAX) = ''
    -- Split the BU types and insert them into a table
    INSERT INTO @BU_TYPES_TABLE (BU_TYPE)
    SELECT value FROM STRING_SPLIT(@BU_TYPES, ',')
    -- Build dynamic BU joins, selects, and group by clauses
    SELECT @BU_JOIN = @BU_JOIN + ' LEFT OUTER JOIN [REPL_EAS].[dbo].BU_SET_DETAILS SD' + CAST(ROW_NUMBER() OVER(ORDER BY (SELECT 1)) AS VARCHAR(10)) 
	+ ' ON BD.BU_SET_ID=SD' + CAST(ROW_NUMBER() OVER(ORDER BY (SELECT 1)) AS VARCHAR(10)) + '.BU_SET_ID AND SD' + CAST(ROW_NUMBER() 
	OVER(ORDER BY (SELECT 1)) AS VARCHAR(10)) + '.BU_TYPE = ''' + BU_TYPE + ''''
           ,@BU_SELECT = @BU_SELECT + ', SD' + CAST(ROW_NUMBER() OVER(ORDER BY (SELECT 1)) AS VARCHAR(10)) + '.BU_CODE AS ''' + BU_TYPE + ''''
           ,@BU_GROUP_BY = @BU_GROUP_BY + ', SD' + CAST(ROW_NUMBER() OVER(ORDER BY (SELECT 1)) AS VARCHAR(10)) + '.BU_CODE'
    FROM @BU_TYPES_TABLE
    -- Build the final SQL query
    SET @SQL = '
        SELECT 
            BD.CAL_ACCTG_PERIOD, 
            BD.COMPANY_CODE,
            BD.ACCOUNT_NUMBER,
            AC.DESCRIPTION' + @BU_SELECT + ',
            sum(BD.CONVERTED_AMOUNT) AS ''BALANCE'', 
            BH.STATUS_CODE,
            A.ACCTG_BASIS_CODE
        FROM   
            [REPL_EAS].[dbo].BSTRN_HEADER BH 
        INNER JOIN 
            [REPL_EAS].[dbo].BSTRN_DETAIL BD ON BH.TRAN_ID=BD.TRAN_ID 
        LEFT OUTER JOIN 
            [REPL_EAS].[dbo].AP_BSTRN_HEADER AP ON BH.TRAN_ID=AP.TRAN_ID 
        INNER JOIN 
            [REPL_EAS].[dbo].ACCT_BAS_ACCT_BAS A ON BD.ACCTG_BASIS_CODE = A.REL_ACCT_BAS_CODE
        ' + @BU_JOIN + '
        FULL OUTER JOIN 
            [REPL_EAS].[dbo].ACCOUNT AC ON BD.ACCOUNT_NUMBER=AC.ACCT_NUMBER AND BD.COMPANY_CODE=AC.COMPANY_CODE
        WHERE   
            (BD.CAL_ACCTG_PERIOD>=@PRIOR_PERIOD AND BD.CAL_ACCTG_PERIOD<=@CURRENT_PERIOD) 
            AND A.ACCTG_BASIS_CODE IN (@BASIS1, @BASIS2)
            AND BD.COMPANY_CODE=@COMPANY_CODE 
            AND AC.ACCT_CLASS_IND IN (''A'', ''L'', ''S'', ''E'', ''G'') 
            OR 
            (BD.CAL_ACCTG_PERIOD>=@PRIOR_PERIOD2 AND BD.CAL_ACCTG_PERIOD<=@CURRENT_PERIOD) 
            AND A.ACCTG_BASIS_CODE IN (@BASIS1, @BASIS2)
            AND BD.COMPANY_CODE=@COMPANY_CODE 
            AND AC.ACCT_CLASS_IND IN (''I'', ''X'', ''F'')
        GROUP BY
            BD.CAL_ACCTG_PERIOD, 
            BD.COMPANY_CODE,
            BD.ACCOUNT_NUMBER,
            AC.DESCRIPTION' + @BU_GROUP_BY + ',
            BH.STATUS_CODE,
            A.ACCTG_BASIS_CODE
        ORDER BY 
            BD.ACCOUNT_NUMBER,
            BD.CAL_ACCTG_PERIOD;
    '
    -- Execute dynamic SQL
    EXEC sp_executesql @SQL,
        N'@PRIOR_PERIOD VARCHAR(10), @CURRENT_PERIOD VARCHAR(10), @BASIS1 VARCHAR(50), @BASIS2 VARCHAR(50), @PRIOR_PERIOD2 VARCHAR(10), @COMPANY_CODE VARCHAR(50)',
        @PRIOR_PERIOD, @CURRENT_PERIOD, @BASIS1, @BASIS2, @PRIOR_PERIOD2, @COMPANY_CODE
