DECLARE @PRIOR_PERIOD Varchar(10), 
        @CURRENT_PERIOD Varchar(10), 
        @PRIOR_PERIOD2 Varchar(10), 
        @BASIS1 VARCHAR(50), 
        @BASIS2 VARCHAR(50), 
        @COMPANY_CODE VARCHAR(50), 
        @BU_CODE_SEG VARCHAR(50), 
        @BU_CODE_AGENT VARCHAR(50), 
        @BU_CODE_CLASS VARCHAR(50), 
        @BU_CODE_REINS VARCHAR(50), 
        @BU_CODE_AFFIL VARCHAR(50), 
        @BU_CODE_EXPG VARCHAR(50);

-- Assign values to the variables as needed
SET @PRIOR_PERIOD = '2000-01-31';  -- Example date
SET @CURRENT_PERIOD = '2024-06-30';  -- Example date
SET @PRIOR_PERIOD2 = '2024-01-31';  -- Example date
SET @BASIS1 = 'GAAPC';  -- Example basis code
SET @BASIS2 = 'STATC';  -- Example basis code
SET @COMPANY_CODE = 'BHSIC';  -- Example company code
SET @BU_CODE_SEG = 'SEG';  -- Example BU_CODE for SEG
SET @BU_CODE_AGENT = 'AGENT';  -- Example BU_CODE for AGENT
SET @BU_CODE_CLASS = 'CLASS';  -- Example BU_CODE for CLASS
SET @BU_CODE_REINS = '';  -- Example BU_CODE for REINS
SET @BU_CODE_AFFIL = '';  -- Example BU_CODE for AFFIL
SET @BU_CODE_EXPG = '';  -- Example BU_CODE for EXPG

DECLARE @sql NVARCHAR(MAX) = N'';

-- Build the dynamic SQL
SET @sql = '
WITH BU_SET_DETAILS AS (
    SELECT 
        BD.BU_SET_ID' +

        CASE WHEN @BU_CODE_SEG != '' THEN '
        ,MAX(CASE WHEN SD.BU_TYPE = ''SEG'' AND SD.BU_CODE = @BU_CODE_SEG THEN SD.BU_CODE END) AS SEG' ELSE '' END +

        CASE WHEN @BU_CODE_AGENT != '' THEN '
        ,MAX(CASE WHEN SD.BU_TYPE = ''AGENT'' AND SD.BU_CODE = @BU_CODE_AGENT THEN SD.BU_CODE END) AS AGENT' ELSE '' END +

        CASE WHEN @BU_CODE_CLASS != '' THEN '
        ,MAX(CASE WHEN SD.BU_TYPE = ''CLASS'' AND SD.BU_CODE = @BU_CODE_CLASS THEN SD.BU_CODE END) AS CLASS' ELSE '' END +

        CASE WHEN @BU_CODE_REINS != '' THEN '
        ,MAX(CASE WHEN SD.BU_TYPE = ''REINS'' AND SD.BU_CODE = @BU_CODE_REINS THEN SD.BU_CODE END) AS REINS' ELSE '' END +

        CASE WHEN @BU_CODE_AFFIL != '' THEN '
        ,MAX(CASE WHEN SD.BU_TYPE = ''AFFIL'' AND SD.BU_CODE = @BU_CODE_AFFIL THEN SD.BU_CODE END) AS AFFIL' ELSE '' END +

        CASE WHEN @BU_CODE_EXPG != '' THEN '
        ,MAX(CASE WHEN SD.BU_TYPE = ''EXPG'' AND SD.BU_CODE = @BU_CODE_EXPG THEN SD.BU_CODE END) AS EXPG' ELSE '' END +

        '
    FROM 
        [REPL_EAS].[dbo].BSTRN_DETAIL BD
        LEFT OUTER JOIN [REPL_EAS].[dbo].BU_SET_DETAILS SD ON BD.BU_SET_ID = SD.BU_SET_ID
    GROUP BY 
        BD.BU_SET_ID
)

SELECT 
    BD.CAL_ACCTG_PERIOD, 
    BD.COMPANY_CODE,
    BD.ACCOUNT_NUMBER,
    AC.DESCRIPTION, ' +

    CASE WHEN @BU_CODE_SEG != '' THEN 'BSD.SEG,' ELSE '' END +
    CASE WHEN @BU_CODE_AGENT != '' THEN 'BSD.AGENT,' ELSE '' END +
    CASE WHEN @BU_CODE_CLASS != '' THEN 'BSD.CLASS,' ELSE '' END +
    CASE WHEN @BU_CODE_REINS != '' THEN 'BSD.REINS,' ELSE '' END +
    CASE WHEN @BU_CODE_AFFIL != '' THEN 'BSD.AFFIL,' ELSE '' END +
    CASE WHEN @BU_CODE_EXPG != '' THEN 'BSD.EXPG,' ELSE '' END +

    'SUM(BD.CONVERTED_AMOUNT) AS BALANCE, 
    BH.STATUS_CODE,
    A.ACCTG_BASIS_CODE

FROM   
    [REPL_EAS].[dbo].BSTRN_HEADER BH 
    INNER JOIN [REPL_EAS].[dbo].BSTRN_DETAIL BD ON BH.TRAN_ID = BD.TRAN_ID 
    LEFT OUTER JOIN [REPL_EAS].[dbo].AP_BSTRN_HEADER AP ON BH.TRAN_ID = AP.TRAN_ID 
    INNER JOIN [REPL_EAS].[dbo].ACCT_BAS_ACCT_BAS A ON BD.ACCTG_BASIS_CODE = A.REL_ACCT_BAS_CODE
    LEFT OUTER JOIN BU_SET_DETAILS BSD ON BD.BU_SET_ID = BSD.BU_SET_ID
    FULL OUTER JOIN [REPL_EAS].[dbo].ACCOUNT AC ON BD.ACCOUNT_NUMBER = AC.ACCT_NUMBER AND BD.COMPANY_CODE = AC.COMPANY_CODE

WHERE   
    (BD.CAL_ACCTG_PERIOD BETWEEN @PRIOR_PERIOD AND @CURRENT_PERIOD AND 
     A.ACCTG_BASIS_CODE IN (@BASIS1, @BASIS2) AND 
     BD.COMPANY_CODE = @COMPANY_CODE AND 
     AC.ACCT_CLASS_IND IN (''A'', ''L'', ''S'', ''E'', ''G'') AND 
     (' +

    CASE WHEN @BU_CODE_SEG != '' THEN 'BSD.SEG = @BU_CODE_SEG OR ' ELSE '' END +
    CASE WHEN @BU_CODE_AGENT != '' THEN 'BSD.AGENT = @BU_CODE_AGENT OR ' ELSE '' END +
    CASE WHEN @BU_CODE_CLASS != '' THEN 'BSD.CLASS = @BU_CODE_CLASS OR ' ELSE '' END +
    CASE WHEN @BU_CODE_REINS != '' THEN 'BSD.REINS = @BU_CODE_REINS OR ' ELSE '' END +
    CASE WHEN @BU_CODE_AFFIL != '' THEN 'BSD.AFFIL = @BU_CODE_AFFIL OR ' ELSE '' END +
    CASE WHEN @BU_CODE_EXPG != '' THEN 'BSD.EXPG = @BU_CODE_EXPG OR ' ELSE '' END +

    '1 = 0))
    OR 
    (BD.CAL_ACCTG_PERIOD BETWEEN @PRIOR_PERIOD2 AND @CURRENT_PERIOD AND 
     A.ACCTG_BASIS_CODE IN (@BASIS1, @BASIS2) AND 
     BD.COMPANY_CODE = @COMPANY_CODE AND 
     AC.ACCT_CLASS_IND IN (''I'', ''X'', ''F'') AND 
     (' +

    CASE WHEN @BU_CODE_SEG != '' THEN 'BSD.SEG = @BU_CODE_SEG OR ' ELSE '' END +
    CASE WHEN @BU_CODE_AGENT != '' THEN 'BSD.AGENT = @BU_CODE_AGENT OR ' ELSE '' END +
    CASE WHEN @BU_CODE_CLASS != '' THEN 'BSD.CLASS = @BU_CODE_CLASS OR ' ELSE '' END +
    CASE WHEN @BU_CODE_REINS != '' THEN 'BSD.REINS = @BU_CODE_REINS OR ' ELSE '' END +
    CASE WHEN @BU_CODE_AFFIL != '' THEN 'BSD.AFFIL = @BU_CODE_AFFIL OR ' ELSE '' END +
    CASE WHEN @BU_CODE_EXPG != '' THEN 'BSD.EXPG = @BU_CODE_EXPG OR ' ELSE '' END +

    '1 = 0))

GROUP BY
    BD.CAL_ACCTG_PERIOD, 
    BD.COMPANY_CODE,
    BD.ACCOUNT_NUMBER,
    AC.DESCRIPTION,' +

    CASE WHEN @BU_CODE_SEG != '' THEN ' BSD.SEG,' ELSE '' END +
    CASE WHEN @BU_CODE_AGENT != '' THEN ' BSD.AGENT,' ELSE '' END +
    CASE WHEN @BU_CODE_CLASS != '' THEN ' BSD.CLASS,' ELSE '' END +
    CASE WHEN @BU_CODE_REINS != '' THEN ' BSD.REINS,' ELSE '' END +
    CASE WHEN @BU_CODE_AFFIL != '' THEN ' BSD.AFFIL,' ELSE '' END +
    CASE WHEN @BU_CODE_EXPG != '' THEN ' BSD.EXPG,' ELSE '' END +

    ' BH.STATUS_CODE,
    A.ACCTG_BASIS_CODE

ORDER BY 
    BD.ACCOUNT_NUMBER,
    BD.CAL_ACCTG_PERIOD;
';

-- Execute the dynamic SQL
EXEC sp_executesql @sql,
    N'@PRIOR_PERIOD Varchar(10), 
      @CURRENT_PERIOD Varchar(10), 
      @PRIOR_PERIOD2 Varchar(10), 
      @BASIS1 VARCHAR(50), 
      @BASIS2 VARCHAR(50), 
      @COMPANY_CODE VARCHAR(50), 
      @BU_CODE_SEG VARCHAR(50), 
      @BU_CODE_AGENT VARCHAR(50), 
      @BU_CODE_CLASS VARCHAR(50), 
      @BU_CODE_REINS VARCHAR(50), 
      @BU_CODE_AFFIL VARCHAR(50), 
      @BU_CODE_EXPG VARCHAR(50)',
    @PRIOR_PERIOD, 
    @CURRENT_PERIOD, 
    @PRIOR_PERIOD2, 
    @BASIS1, 
    @BASIS
